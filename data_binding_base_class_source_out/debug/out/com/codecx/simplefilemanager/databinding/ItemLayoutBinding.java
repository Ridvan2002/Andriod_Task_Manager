// Generated by view binder compiler. Do not edit!
package com.codecx.simplefilemanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.codecx.simplefilemanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView btnMore;

  @NonNull
  public final TextView fileName;

  @NonNull
  public final ImageView mIcon;

  @NonNull
  public final LinearLayout mItem;

  @NonNull
  public final TextView tvFileCountPath;

  private ItemLayoutBinding(@NonNull LinearLayout rootView, @NonNull ImageView btnMore,
      @NonNull TextView fileName, @NonNull ImageView mIcon, @NonNull LinearLayout mItem,
      @NonNull TextView tvFileCountPath) {
    this.rootView = rootView;
    this.btnMore = btnMore;
    this.fileName = fileName;
    this.mIcon = mIcon;
    this.mItem = mItem;
    this.tvFileCountPath = tvFileCountPath;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnMore;
      ImageView btnMore = ViewBindings.findChildViewById(rootView, id);
      if (btnMore == null) {
        break missingId;
      }

      id = R.id.fileName;
      TextView fileName = ViewBindings.findChildViewById(rootView, id);
      if (fileName == null) {
        break missingId;
      }

      id = R.id.mIcon;
      ImageView mIcon = ViewBindings.findChildViewById(rootView, id);
      if (mIcon == null) {
        break missingId;
      }

      id = R.id.mItem;
      LinearLayout mItem = ViewBindings.findChildViewById(rootView, id);
      if (mItem == null) {
        break missingId;
      }

      id = R.id.tvFileCountPath;
      TextView tvFileCountPath = ViewBindings.findChildViewById(rootView, id);
      if (tvFileCountPath == null) {
        break missingId;
      }

      return new ItemLayoutBinding((LinearLayout) rootView, btnMore, fileName, mIcon, mItem,
          tvFileCountPath);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
